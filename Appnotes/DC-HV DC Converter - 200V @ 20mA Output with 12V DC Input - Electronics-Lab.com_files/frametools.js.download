//初始化样式
$(document).ready(function () {


    $('.tinfo_1 tr.trbg').hover(
       function () {
           $(this).addClass('trbgh');
       }, function () {
           $(this).removeClass('trbgh');
       }
    )
    $('.tinfo_2 td').hover(
       function () {
           $(this).addClass('tdh');
       }, function () {
           $(this).removeClass('tdh');
       }
    )

    $('input.bottonBox').hover(
       function () {
           $(this).addClass('bottonBoxClick');
       }, function () {
           $(this).removeClass('bottonBoxClick');
       }



   );

    $('input.bottonBoxGreen').hover(
    function () {
        $(this).addClass('bottonBoxGreenClick');
    }, function () {
        $(this).removeClass('bottonBoxGreenClick');
    });

    $('input.bottonBoxYellow').hover(
function () {
    $(this).addClass('bottonBoxYellowClick');
}, function () {
    $(this).removeClass('bottonBoxYellowClick');
});

    $('input.bottonBoxBlue').hover(
function () {
    $(this).addClass('bottonBoxBlueClick');
}, function () {
    $(this).removeClass('bottonBoxBlueClick');
});

    //设置过期处理
    $.ajaxSetup({
        complete: function (xMLHttpRequest, textStatus) {
            var header = xMLHttpRequest.getResponseHeader('Timeout-Head');
            if (header != undefined && header == "timeout") {
                top.location.href = '/admin/account/';
            }
        }, cache: false
    });


    $(document).on('keyup focus', '.js-check-int5', function () {
        var ival = $(this).val().replaceToIntStr(5);
        $(this).val(ival);
    });

    $(document).on('keyup focus', '.js-check-int8', function () {
        var ival = $(this).val().replaceToIntStr(8);
        $(this).val(ival);
    });

    $(document).on('keyup focus', '.js-check-int', function () {
        var ival = $(this).val().replaceToIntStr();
        $(this).val(ival);
    });

    $(document).on('keyup focus', '.js-check-float', function () {
        var ival = $(this).val().replaceToFloatStr();
        $(this).val(ival);
    });


    $(document).on('keyup focus', '.js-check-size', function () {
        var ival = $(this).val().replaceToFloatStr();

        if (ival > 1200) {
            var altmsg = $("#JsMaxLenAndWidth").val();
            if (!altmsg || altmsg == '') {
                altmsg = 'Maximum length/Width: 1200mm.';
            }
            if (layer) {
                layer.msg(altmsg);
            }
            
            $(this).val('');
        }
        else {
            $(this).val(ival);
        }

        
    });


});





/********************************************  
 *   PicUploader 图片上传方法 
********************************************/
function PicUploader(divId, hidName, objName, picNum, uploadConfig) {
    this.Count = 0; // 点开多少个上传
    this.UpCount = 0; //已上传多少个  
    this.CanCount = picNum; //可上传数量
    this.hidName = hidName;
    this.objName = objName;
    this.divName = divId;
    this.CurrentLi = undefined;
    this.UploadConfig = uploadConfig;
    this.ShowDiv = "<li><input type=\"hidden\" name=\"" + hidName + "\" /><a href=\"javascript:void(0);\" title=\"删除图片\" class=\"del\" onclick=\"" + objName + ".Del(this);return false;\">╳</a><img src=\"/img/images/common/noupload.gif\" border=\"0\" alt=\"pic\" onclick=\"" + objName + ".Show(this);\"  width=\"105px\" height=\"105px\" /></li>";
    $("#" + divId).html(" <ul> <li class=\"add\" id=\"li" + divId + "\"><a href=\"javascript:void(0);\" onclick=\"" + objName + ".Add();return false;\"><font>+</font>上传图片</a></li></ul>");
}

PicUploader.prototype.Success = function (imgUrl, imgname) {
    if (typeof (this.CurrentLi) != 'undefined') {
        this.CurrentLi.find("input").val(imgUrl);
        this.CurrentLi.find("img").attr("src", imgUrl);
        this.UpCount++;
        this.CurrentLi = undefined;
        //CloseWin();
    }
    else {
        this.AutoAdd();
        this.Success(imgUrl, imgname);
    }
}

PicUploader.prototype.AutoAdd = function () {
    if (this.Count >= this.CanCount) return false;
    var bef = $(this.ShowDiv);
    $("#li" + this.divName).before(bef);
    this.CurrentLi = $("#li" + this.divName).prev("li");
    this.Count++;

    if (this.Count == this.CanCount) {
        $("#li" + this.divName).hide();
    }
};

PicUploader.prototype.Init = function (img) {
    if (img == "") { return false; }
    var imgSort = img.split('|');
    for (var i = 0; i < imgSort.length; i++) {
        this.Success(imgSort[i], "");
    }
};

PicUploader.prototype.Add = function () {
    if (this.Count >= this.CanCount) return false;
    var bef = $(this.ShowDiv);
    $("#li" + this.divName).before(bef);
    this.Count++;
    if (this.Count == this.CanCount) {
        $("#li" + this.divName).hide();
    }
    $("#li" + this.divName).prev().find("img").click();
};

PicUploader.prototype.Show = function (objImg) {
    var uploadNum = this.CanCount - this.UpCount;
    OpenWin("上传图片", 550, 380, "/upload/web/upload.aspx?funname=" + this.objName + ".Success&uptype=" + this.UploadConfig + "&completefun=CloseWin&uploadnum=1");
    this.CurrentLi = $(objImg).parents("li");
};

PicUploader.prototype.Del = function (objA) {
    var currPicVal = $(objA).parent().find("input").val();
    if (currPicVal != "") {
        this.UpCount--;
    }
    this.Count--;
    $(objA).parent().remove();
    if (this.Count == this.CanCount - 1) {
        $("#li" + this.divName).show();
    }
};

/********************************************  
 *   PicUploader 图片上传方法 END 
********************************************/








var submiting = false;

// POST提交请求
function MyPost(url, parm, callback) {
    if (submiting) {
        $.messager.show({ title: "请求失败", msg: "请求尚未处理完成，请不要重复提交", timeout: 5000, showType: 'fade' });
        return false;
    };
    submiting = true;
    var defualtBack;
    if (callback == undefined) {
        defualtBack = function (data) {
            submiting = false;
        };
    } else {
        defualtBack = function (data) {
            callback(data);
            submiting = false;
        };
    }
    $.post(encodeURI(url), parm, defualtBack);
    return true;
};





/// 弹出窗口关闭
function CloseWin() {
    $("#win_open_div").window('close');
}

/// 最大化窗口
function MaxWin() {
    $("#win_open_div").window('maximize');
}

/// 弹出窗口
function OpenWin(title, w, h, url) {
    if ($("#win_open_div").size() == 0) {
        $(document.body).append('<div id="win_open_div"> </div>');
    }

    var mw = w + "";
    if (mw.indexOf("%") > 0) {
        w = parseInt($(document).width() * parseInt(mw.replace("%", "")) / 100);

    }
    var mh = h + "";
    if (mh.indexOf("%") > 0) {
        h = $(document).height() * parseInt(mh.replace("%", "")) / 100;
    }


    $('#win_open_div').window({
        title: title,
        width: w,
        height: h,
        left: $(window).width() / 2 - w / 2 + $(document).scrollLeft(),
        top: $(window).height() / 2 - h / 2 + $(document).scrollTop(),
        collapsible: false,
        minimizable: false,
        modal: true,
        content: '<iframe id="win_open_ifm" name="win_open_ifm" scrolling="yes" border="0" frameborder="0"  src="' + url + '" style="width:100%;height:99%;"></iframe>'
    });
}




function OpenTopWin(top, title, w, h, url) {
    OpenWin(title, w, h, url);
    $('#win_open_div').window({ top: top });
}



////////////// 表单操作 //////////////////

///刷新表单数据，保持当前页
function TableRefresh(tbName) {
    $('#' + tbName).datagrid('reload');

}

///重载表单数据，显示第一页
function TableReLoad(tbName) {
    $('#' + tbName).datagrid('load');
}



function IsTrue(val, row, index) {
    return val ? "<img src=\"/img/images/manage/system/right.png\" border=0/>" : "<img src=\"/img/images/manage/system/false.gif\" border=0/>";
}


function GetIsTrue(val) {
    return val ? "<img src=\"/img/images/manage/system/right.png\" border=0/>" : "<img src=\"/img/images/manage/system/false.gif\" border=0/>";
}
function IsTrueFont(val) {
    return val ? "<font color='green'>是</font>" : "<font color='red'>否</font>";
}

Date.prototype.formatTime = function (formatstr) {
    var date = this;
    var year = date.getFullYear();
    var set = {
        "M+": date.getMonth() + 1,
        "d+": date.getDate(),
        "h+": date.getHours() >= 12 ? date.getHours() - 12 : date.getHours(),
        "H+": date.getHours(),
        "m+": date.getMinutes(),
        "s+": date.getSeconds()
    };
    if (/(y+)/.test(formatstr)) {
        formatstr = formatstr.replace(RegExp.$1, (year + "").substr(4 - RegExp.$1.length));
    }
    for (var pro in set) {
        if (new RegExp("(" + pro + ")").test(formatstr)) {
            var zero = RegExp.$1.length == 1 ? "0" : "00"
            var stubStr = zero + set[pro];
            formatstr = formatstr.replace(RegExp.$1, RegExp.$1.length == 1 ? set[pro] : stubStr.substr(stubStr.length - RegExp.$1.length));
        }
    }
    return formatstr;
};

function dateFormart(v, r, i) {
    if (!v)
        return "";
    var date = new Date(parseInt(v.replace("/Date(", "").replace(")/", "")));
    if (!date || date < new Date('2000-1-1'))
        return "";
    return date.format("yyyy-MM-dd hh:mm:ss");
}

function dateFormartByDate(v, r, i) {
    if (!v)
        return "";
    var date = new Date(parseInt(v.replace("/Date(", "").replace(")/", "")));
    if (!date || date < new Date('2000-1-1'))
        return "";
    return date.format("yyyy-MM-dd");
}

function dateFormartDay(r) {

    if (!r.PayTime)
        return "";
    var date = new Date(parseInt(r.PayTime.replace("/Date(", "").replace(")/", "")));
    if (!date)
        return "";
    hour = date.getHours();
    if (r.ProductionCycle == 6 && hour < 12) {
        return date.DateAdd('d', 0).format("yyyy-MM-dd");
    }
    else if (r.ProductionCycle == 12 || (r.ProductionCycle == 6 && hour > 12)) {
        return date.DateAdd('d', 1).format("yyyy-MM-dd");
    }
    return date.DateAdd('d', 4).format("yyyy-MM-dd");
}

Date.prototype.DateAdd = function (strInterval, Number) {
    var dtTmp = this;
    switch (strInterval) {
        case 's': return new Date(Date.parse(dtTmp) + (1000 * Number));
        case 'n': return new Date(Date.parse(dtTmp) + (60000 * Number));
        case 'h': return new Date(Date.parse(dtTmp) + (3600000 * Number));
        case 'd': return new Date(Date.parse(dtTmp) + (86400000 * Number));
        case 'w': return new Date(Date.parse(dtTmp) + ((86400000 * 7) * Number));
        case 'q': return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number * 3, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());
        case 'm': return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());
        case 'y': return new Date((dtTmp.getFullYear() + Number), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());
    }
}
// 对Date的扩展，将 Date 转化为指定格式的String
// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，
// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)
// 例子：
// (new Date()).Format("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423
// (new Date()).Format("yyyy-M-d h:m:s.S")      ==> 2006-7-2 8:9:4.18
Date.prototype.format = function (fmt) { //author: meizz
    var o = {
        "M+": this.getMonth() + 1,                 //月份
        "d+": this.getDate(),                    //日
        "h+": this.getHours(),                   //小时
        "m+": this.getMinutes(),                 //分
        "s+": this.getSeconds(),                 //秒
        "q+": Math.floor((this.getMonth() + 3) / 3), //季度
        "S": this.getMilliseconds()             //毫秒
    };
    if (/(y+)/.test(fmt))
        fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(fmt))
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
    return fmt;
}




///////////// Tab 操作 //////////////

// 增加标签
function addTab(subtitle, url, closable) {
    debugger;
    if (!$('#tabs').tabs('exists', subtitle)) {
        $('#tabs').tabs('add', {
            title: subtitle,
            content: '<iframe scrolling="yes" border="0" frameborder="0"  src="' + url + '" style="width:100%;height:100%;"></iframe>',
            closable: closable
        });
    } else {
        $('#tabs').tabs('select', subtitle);
        //如果碰到相同标题的，更新为当前点击的地址
        var tab = $('#tabs').tabs('getSelected');
        $('#tabs').tabs('update', {
            tab: tab,
            options: { content: '<iframe scrolling="yes" border="0" frameborder="0"  src="' + url + '" style="width:100%;height:100%;"></iframe>' }
        });
    }
}

// 根据title更新tab
function updateTab(subtitle) {
    if ($('#tabs').tabs('exists', subtitle)) {
        var tab = $('#tabs').tabs('getTab', subtitle); //获取该title的tab
        $('#tabs').tabs('update', {
            tab: tab,
            options: {}
        });
    }
}

// 关闭当前的tab并更新指定title的tab
function closeAndUpdateTab(subTitle) {
    var tab = $('#tabs').tabs('getSelected');
    var index = $('#tabs').tabs('getTabIndex', tab);
    $('#tabs').tabs('close', index);
    updateTab(subTitle);
}

// 关闭当前标签
function closeCurrTab() {
    var tab = $('#tabs').tabs('getSelected');
    var tabs = $('#tabs').tabs('tabs');
    var tabNums = tabs.length;
    if (tabNums > 1) {
        if (tab) {
            var index = $('#tabs').tabs('getTabIndex', tab);
            $('#tabs').tabs('close', index);
        }
    }
    else if (tabNums == 1) {
        $.messager.confirm('请确认', '只剩下一个窗口了，是否确认删除？', function (r) {
            if (r) {
                if (tab) {
                    var index = $('#tabs').tabs('getTabIndex', tab);
                    $('#tabs').tabs('close', index);
                }
            }
        });
    }
    else {
        $.messager.alert('友情提示', '已经没有窗口了，您无需再删除了!');
    }
}

// 刷新当前Tab
function reloadCurrTab() {
    var tab = $('#tabs').tabs('getSelected');
    $('#tabs').tabs('update', {
        tab: tab,
        options: {}
    });
}

// 更新当前Tab 地址
function updateSelectTab(url) {
    var tab = $('#tabs').tabs('getSelected');
    $('#tabs').tabs('update', {
        tab: tab,
        options: {
            content: '<iframe scrolling="yes" border="0" frameborder="0"  src="' + url + '" style="width:100%;height:100%;"></iframe>'
        }
    });
}

function tabClose() {
    /*双击关闭TAB选项卡*/
    $(".tabs-inner").dblclick(function () {
        var subtitle = $(this).children("span").text();
        if (subtitle == '我的桌面') return true;
        $('#tabs').tabs('close', subtitle);
    });

    $(".tabs-inner").bind('contextmenu', function (e) {
        $('#mm').menu('show', {
            left: e.pageX,
            top: e.pageY
        });

        var subtitle = $(this).children("span").text();
        $('#mm').data("currtab", subtitle);

        return false;
    });
}





////////////选项框//////////////////
function CheckAll(chkIdName, checked) {
    $('input[name=' + chkIdName + ']').prop('checked', checked);
}


function GetCheckedNum(chkIdName) {
    return $('input[name=' + chkIdName + ']:checked').length;
}


//图片缩放
function DrawImage(ImgD, FitWidth, FitHeight) {
    var image = new Image();
    image.src = ImgD.src;
    if (image.width > 0 && image.height > 0) {
        if (image.width / image.height >= FitWidth / FitHeight) {
            if (image.width > FitWidth) {
                ImgD.width = FitWidth;
                ImgD.height = (image.height * FitWidth) / image.width;
            } else {
                ImgD.width = image.width;
                ImgD.height = image.height;
            }
        } else {
            if (image.height > FitHeight) {
                ImgD.height = FitHeight;
                ImgD.width = (image.width * FitHeight) / image.height;
            } else {
                ImgD.width = image.width;
                ImgD.height = image.height;
            }
        }
    }
}

//表单等序列化-escape编码
function serialize(objs) {
    var parmString = $(objs).serialize();
    var parmArray = parmString.split("&");
    var parmStringNew = "";
    $.each(parmArray, function (index, data) {
        var li_pos = data.indexOf("=");
        if (li_pos > 0) {
            var name = data.substring(0, li_pos);
            var value = escape(decodeURIComponent(data.substr(li_pos + 1)));
            var parm = name + "=" + value;
            parmStringNew = parmStringNew == "" ? parm : parmStringNew + '&' + parm;
        }
    });

    return parmStringNew;
}




function GetCashType(v) {
    if (v == 1) {
        return "取消订单";
    }
    if (v == 2) {
        return "提现";
    }
    if (v == 3) {
        return "注册";
    } if (v == 4) {
        return "登录";
    } if (v == 5) {
        return "留言";
    } if (v == 6) {
        return "发布分享";
    } if (v == 7) {
        return "邀请注册";
    } if (v == 8) {
        return "被邀请人下单";
    } if (v == 9) {
        return "PayPal充值";
    } if (v == 10) {
        return "订单退款";
    } if (v == 99) {
        return "系统操作";
    } if (v == 100) {
        return "下订单";
    }
    return "其他";
}
function GetGroupStatus(v) {

    if (v == 1) {
        return "<font color='blue'>尚未生效</font>";
    }
    if (v == 2) {
        return "<font color='green'>订单生效</font>";
    }
    if (v == 3) {
        return "<font color='#999999'>订单取消</font>";
    }
    if (v == 4) {
        return "<font color='red'>等待发货</font>";
    }
    if (v == 5) {
        return "<font color='black'>已发货</font>";
    }
    if (v == 100) {
        return "交易成功";
    }
    return "其他";
}

function GetPanelStatus(v) {
    if (v == 1) {
        return "<font color='blue'>待审核</font>";
    }
    if (v == 2) {
        return "<font color='red'>审核中</font>";
    }
    if (v == 3) {
        return "<font color='#999999'>审核不通过</font>";
    }
    if (v == 4) {
        return "<font color='#999999'>交易取消</font>";
    }
    if (v == 5) {
        return "<font color='green'>已审核</font>";
    }
    if (v == 6) {
        return "确定下单";
    }
    if (v == 7) {
        return "<font color='blue'>等待内部编号";
    }
    if (v == 8) {
        return "已内部编号</font>";
    }
    if (v == 9) {
        return "制作MI";
    }
    if (v == 10) {
        return "生产中";
    }
    if (v == 11) {
        return "生产完成";
    }
    if (v == 12) {
        return "待发货";
    }
    if (v == 13) {
        return "已发货";
    }
    if (v == 100) {
        return "交易成功";
    }
    return "其他";
}


function GetUserPanelStatus(v) {
    if (v == 1) {
        return "<font color='blue'>等待上传文件</font>";
    }
    if (v == 4) {
        return "<font color='red'>审核中</font>";
    }
    if (v == 5) {
        return "<font color='#999999'>审核不通过</font>";
    }
    if (v == 7) {
        return "<font color='#999999'>交易取消</font>";
    }
    if (v == 8) {
        return "<font color='red'>已审核，待付款</font>";
    }

    if (v == 13) {
        return "<font color='green'>生产中</font>";
    }
    if (v == 14) {
        return "生产完成";
    }
    if (v == 15) {
        return "待发货";
    }
    if (v == 16) {
        return "已发货";
    }
    if (v == 100) {
        return "交易成功";
    }
    return "其他";
}

function GetTax(v) {

    if (v == 1) {
        return "<font color='black'>普通发票</font>";
    }
    if (v == 2) {
        return "<font color='black'>专用发票</font>";
    }
  
    return "不要发票";
}
function GetProType(v) {

    if (v == 1) {
        return "<font color='black'>面板</font>";
    }
    if (v == 2) {
        return "<font color='black'>开关</font>";
    }
   

    return "--";
}

function GetProDetailStatus(v) {

    if (v == 1) {
        return "<font color='blue'>待审核</font>";
    }
    if (v == 2) {
        return "<font color='999999'>取消</font>";
    }
    if (v == 3) {
        return "<font color='#999999'>审核不通过</font>";
    }
   
    if (v == 4) {
        return "<font color='green'>已审核</font>";
    }
    if (v == 5) {
        return "确定下单";
    }
    if (v == 6) {
        return "<font color='red'>采购中</font>";
    }
    if (v == 7) {
        return "<font color='red'>已退款</font>";
    }
    if (v == 8) {
        return "采购完成";
    }
}

function GetSendType(v) {

    if (v == 1) {
        return "<font color='blue'>寄样</font>";
    }
    if (v == 2) {
        return "<font color='blue'>部分产品</font>";
    }
    if (v == 3) {
        return "<font color='green'>全部产品</font>";
    }
}

function setCookie(name, value, Days) {

    var exp = new Date();
    exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
    document.cookie = name + "=" + escape(value) + ";expires=" + exp.toGMTString() + ";path=/";
}

function getCookie(name) {
    var arr, reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");
    if (arr = document.cookie.match(reg))
        return unescape(arr[2]);
    else
        return null;
}

function delCookie(name) {
    var exp = new Date();
    exp.setTime(exp.getTime() - 1);
    var cval = getCookie(name);
    if (cval != null)
        document.cookie = name + "=" + cval + ";expires=" + exp.toGMTString();
}